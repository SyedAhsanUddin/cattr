#!/bin/sh
set -e

# --- 1. Locate Laravel Project ---
# Find the 'artisan' file to locate the project root directory.
ARTISAN_FILE="$(find / -type f -name artisan 2>/dev/null | head -n1)"
if [ -z "$ARTISAN_FILE" ]; then
  echo "ERROR: Could not find Laravel 'artisan' file. Exiting."
  exit 1
fi
APP_DIR="$(dirname "$ARTISAN_FILE")"
cd "$APP_DIR"
echo "âœ… Laravel project found at $APP_DIR"

# --- 2. Configure Environment (.env) ---
# Use the .env file from Render's secret files if it exists.
# Otherwise, create a .env file from individual environment variables.
if [ -f /etc/secrets/.env ]; then
  echo "Found secret file, copying to .env"
  cp /etc/secrets/.env "$APP_DIR/.env"
else
  echo "No secret file found. Building .env from environment variables."
  # Set default APP_URL if not provided
  : "${APP_URL:=https://cattr-app.onrender.com}"

  # Construct the DATABASE_URL for TiDB Serverless, which requires TLS.
  if [ -z "$DATABASE_URL" ]; then
    DATABASE_URL="mysql://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_DATABASE}?ssl-mode=VERIFY_IDENTITY"
  fi

  cat > "$APP_DIR/.env" <<EOF
# --- Generated by start.sh ---
APP_NAME=Cattr
APP_ENV=production
APP_DEBUG=false
APP_KEY=${APP_KEY}
APP_URL=${APP_URL}
DATABASE_URL=${DATABASE_URL}
DB_CONNECTION=mysql
DB_HOST=${DB_HOST}
DB_PORT=${DB_PORT}
DB_DATABASE=${DB_DATABASE}
DB_USERNAME=${DB_USERNAME}
DB_PASSWORD=${DB_PASSWORD}
MYSQL_ATTR_SSL_CA=${MYSQL_ATTR_SSL_CA:-/etc/ssl/certs/ca-certificates.crt}
EOF
fi
# Ensure the file has Unix line endings
sed -i 's/\r$//' "$APP_DIR/.env" || true

# --- 3. Enforce TLS for Database Connection ---
# Modify Laravel's database config to use the SSL CA certificate.
DBCFG="$APP_DIR/config/database.php"
if [ -f "$DBCFG" ] && ! grep -q "PDO::MYSQL_ATTR_SSL_CA" "$DBCFG"; then
  echo "Patching config/database.php to enforce TLS..."
  cp "$DBCFG" "$DBCFG.bak"
  awk '
    BEGIN{inmysql=0; hasopt=0}
    { print }
    $0 ~ /'\''mysql'\''[[:space:]]*=>[[:space:]]*\[/ { inmysql=1; next }
    inmysql==1 && $0 ~ /options[[:space:]]*=>/ { hasopt=1 }
    inmysql==1 && $0 ~ /\],[[:space:]]*$/ {
      if (hasopt==0) {
        print "            '\''options'\'' => extension_loaded('\''pdo_mysql'\'') ? array_filter([\n                PDO::MYSQL_ATTR_SSL_CA => env('\''MYSQL_ATTR_SSL_CA'\''),\n            ]) : [],"
      }
      inmysql=0
    }
  ' "$DBCFG" > "$DBCFG.tmp" && mv "$DBCFG.tmp" "$DBCFG"
  echo "âœ… TLS configured."
fi

# --- 4a. Skip Incompatible & Obsolete Migrations ---
MIGRATIONS_DIR="$APP_DIR/database/migrations"
if [ -d "$MIGRATIONS_DIR" ]; then
  echo "Scanning for incompatible and obsolete migrations..."

  # Rule 1: Skip migrations that use database triggers
  TRIGGER_MIGS="$(grep -rilE 'CREATE[[:space:]]+TRIGGER|DROP[[:space:]]+TRIGGER' "$MIGRATIONS_DIR" || true)"
  if [ -n "$TRIGGER_MIGS" ]; then
    echo "Disabling TiDB-incompatible trigger migrations:"
    echo "$TRIGGER_MIGS" | while read -r f; do
      [ -f "$f" ] || continue
      echo "  -> Skipping $f"
      mv "$f" "$f.skipped"
    done
  fi

  # Rule 2: Skip migrations with known duplicate indexes
  for f in "$MIGRATIONS_DIR"/*add_index*.php; do
    [ -f "$f" ] || continue
    echo "Disabling known duplicate-index migration: $f"
    mv "$f" "$f.skipped"
  done
  
  # Rule 3: Skip a list of specific obsolete migrations that fail due to missing classes
  OBSOLETE_MIGRATIONS="
  2018_09_27_100017_update_rules.php
  2018_11_02_121027_create_registrations_table.php
  "
  echo "Disabling obsolete migrations with missing classes:"
  echo "$OBSOLETE_MIGRATIONS" | while read -r migration_file; do
    [ -z "$migration_file" ] && continue
    TARGET_FILE="$MIGRATIONS_DIR/$migration_file"
    if [ -f "$TARGET_FILE" ]; then
      echo "  -> Skipping $TARGET_FILE"
      mv "$TARGET_FILE" "$TARGET_FILE.skipped"
    fi
  done
fi

# --- 4b. Replace TiDB-incompatible view migration with a compatible one ---
# Find any migration that creates the 'user_time_activity' view (by name or content) and disable it.
FOUND_VIEW_MIGS="$( (find "$MIGRATIONS_DIR" -type f -name "*add_user_last_time_usage_view*.php" ; \
                      grep -rilE 'CREATE[[:space:]]+VIEW[[:space:]]+`?user_time_activity`?' "$MIGRATIONS_DIR") | sort -u )"
if [ -n "$FOUND_VIEW_MIGS" ]; then
  echo "Replacing TiDB-incompatible user_time_activity view migration(s)..."
  echo "$FOUND_VIEW_MIGS" | while read -r f; do
    [ -f "$f" ] || continue
    echo "  -> Skipping $f"
    mv "$f" "$f.skipped"
  done

  # Add a TiDB-friendly migration with a newer timestamp so it runs after earlier ones.
  TS="$(date +%Y_%m_%d_%H%M%S)"
  VIEW_MIG_NEW="$MIGRATIONS_DIR/${TS}_add_user_last_time_usage_view_tidb.php"
  cat > "$VIEW_MIG_NEW" <<'PHP'
<?php

use Illuminate\Support\Facades\DB;
use Illuminate\Database\Migrations\Migration;
return new class extends Migration {
    public function up(): void
    {
        // Idempotent: drop then create
        DB::statement('DROP VIEW IF EXISTS user_time_activity');

        // TiDB-friendly: join to a MAX() per user instead of a subquery in ON()
        DB::statement(<<<'SQL'
CREATE VIEW user_time_activity AS
SELECT
    ti.id  AS time_interval_id,
    ti.user_id,
    ti.task_id,
    ti.end_at AS last_time_activity
FROM time_intervals ti
JOIN (
    SELECT user_id, MAX(end_at) AS max_end_at
    FROM time_intervals
    GROUP BY user_id
) tmax
  ON ti.user_id = tmax.user_id
 AND ti.end_at  = tmax.max_end_at
SQL
        );
    }

    public function down(): void
    {
        DB::statement('DROP VIEW IF EXISTS user_time_activity');
    }
};
PHP
  echo "  -> Added $VIEW_MIG_NEW"
else
  echo "No user_time_activity view migration found to replace."
fi

# --- 5. Prepare and Launch Application ---
echo "Clearing caches..."
php artisan config:clear
php artisan route:clear
php artisan view:clear
php artisan cache:clear

echo "Running database migrations..."
php artisan migrate --force

echo "Seeding the database..."
php artisan db:seed --force

echo "ðŸš€ Starting Cattr application server..."
php artisan serve --host 0.0.0.0 --port "$PORT"
